name: Linux build and test

on: [push, pull_request]

jobs:
  test-clang-based:
    name: ${{ matrix.os }}, Clang ${{ matrix.clang }}, CUDA ${{matrix.cuda}}, ROCm ${{matrix.rocm}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        clang: [15, 16, 17, 18]
        os: [ubuntu-22.04]
        cuda: [11.0.2]
        rocm: [5.4.3]
        include:
          - clang: 17
            os: ubuntu-22.04
            cuda: 11.0.2
            rocm: 5.6.1

    env:
      CMAKE_GENERATOR: Ninja

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install build dependencies from apt
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake libboost-all-dev wget gpg curl ninja-build \
            ocl-icd-opencl-dev libtbb-dev libnuma-dev unzip

      - name: Install Level Zero
        run: |
          wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero-devel_1.2.3+u18.04_amd64.deb
          wget https://github.com/oneapi-src/level-zero/releases/download/v1.2.3/level-zero_1.2.3+u18.04_amd64.deb
          sudo dpkg -i ./level-zero*

      - name: Install CUDA
        run: |
          mkdir -p /opt/AdaptiveCpp/cuda
          wget --progress=dot:giga -O cuda.sh http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
          sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=/opt/AdaptiveCpp/cuda || true
          echo "CUDA Version ${{matrix.cuda}}" | sudo tee /opt/AdaptiveCpp/cuda/version.txt

      - name: Install ROCm
        run: |
          [[ ${{matrix.os}} == ubuntu-20.04 ]] && CODENAME=xenial
          [[ ${{matrix.os}} == ubuntu-22.04 ]] && CODENAME=jammy
          [[ ${{matrix.os}} == ubuntu-24.04 ]] && CODENAME=noble

          wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
          echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm}} $CODENAME main" | sudo tee /etc/apt/sources.list.d/rocm.list
          printf 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' | sudo tee /etc/apt/preferences.d/rocm-pin-600
          sudo apt update
          sudo apt install rocm-dev

      - name: Install LLVM
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{matrix.clang}}
          sudo apt-get install -y \
            libclang-${{matrix.clang}}-dev \
            clang-tools-${{matrix.clang}} \
            libomp-${{matrix.clang}}-dev

      - name: Fix symlinks (Clang 16)
        if: ${{matrix.clang == 16}}
        run: |
          sudo rm -r /usr/lib/clang/16*
          sudo ln -s /usr/lib/llvm-16/lib/clang/16 /usr/lib/clang/16

      - name: Configure AdaptiveCpp
        run: |
          cmake -B build \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{matrix.clang}} \
            -DCLANG_EXECUTABLE_PATH=/usr/bin/clang++-${{matrix.clang}} \
            -DLLVM_DIR=/usr/lib/llvm-${{matrix.clang}}/cmake \
            -DWITH_CUDA_BACKEND=ON \
            -DWITH_ROCM_BACKEND=ON \
            -DWITH_LEVEL_ZERO_BACKEND=ON \
            -DCUDA_TOOLKIT_ROOT_DIR=/opt/AdaptiveCpp/cuda \
            -DROCM_PATH=/opt/rocm

      - name: Build AdaptiveCpp
        run: cmake --build build

      - name: Install AdaptiveCpp
        run: sudo cmake --install build

      - name: Build CPU tests
        run: |
          cmake \
            -S ${GITHUB_WORKSPACE}/tests \
            -B ${GITHUB_WORKSPACE}/build/tests-cpu \
            -DACPP_TARGETS="omp"
          cmake --build ${GITHUB_WORKSPACE}/build/tests-cpu

      - name: Build generic SSCP tests
        if: matrix.clang >= 14
        run: |
          cmake \
            -S ${GITHUB_WORKSPACE}/tests \
            -B ${GITHUB_WORKSPACE}/build/tests-sscp \
            -DACPP_TARGETS="generic" \
            -DWITH_PSTL_TESTS=ON
          cmake --build ${GITHUB_WORKSPACE}/build/tests-sscp

      - name: Build CUDA tests
        run: |
          cmake \
            -S ${GITHUB_WORKSPACE}/tests \
            -B ${GITHUB_WORKSPACE}/build/tests-cuda \
            -DACPP_TARGETS="cuda:sm_60" \
            -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib/llvm-${{matrix.clang}}/lib"
          cmake --build ${GITHUB_WORKSPACE}/build/tests-cuda

      - name: Build ROCm tests
        run: |
          cmake \
            -S ${GITHUB_WORKSPACE}/tests \
            -B ${GITHUB_WORKSPACE}/build/tests-rocm \
            -DACPP_TARGETS="hip:gfx906" \
            -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib/llvm-${{matrix.clang}}/lib"
          cmake --build ${GITHUB_WORKSPACE}/build/tests-rocm

      - name: Build explicit multipass tests
        run: |
          cmake \
            -S ${GITHUB_WORKSPACE}/tests \
            -B ${GITHUB_WORKSPACE}/build/tests-emp \
            -DACPP_TARGETS="omp;cuda.explicit-multipass:sm_60;hip:gfx906"
          cmake --build ${GITHUB_WORKSPACE}/build/tests-emp

      - name: Run CPU tests
        run: |
          cd ${GITHUB_WORKSPACE}/build/tests-cpu
          ACPP_VISIBILITY_MASK="omp" ./sycl_tests

      - name: Run CPU SSCP tests
        if: matrix.clang >= 14
        run: |
          cd ${GITHUB_WORKSPACE}/build/tests-sscp
          ACPP_VISIBILITY_MASK="omp" ./sycl_tests

      - name: Run PSTL tests on CPU
        if: matrix.clang >= 14
        run: |
          cd ${GITHUB_WORKSPACE}/build/tests-sscp
          ACPP_VISIBILITY_MASK="omp" ./pstl_tests

  test-nvcxx-based:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        nvhpc: [23.9]
        cuda: [12.2]

    name: nvcxx ${{matrix.nvhpc}}, ${{matrix.os}}, CUDA ${{matrix.cuda}}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libboost-all-dev wget gpg curl

      - name: Install nvcxx
        run: |
          MAJOR_VERSION=$(echo ${{matrix.nvhpc}} | sed 's/\..*//')
          MINOR_VERSION=$(echo ${{matrix.nvhpc}} | sed 's/.*\.//')

          curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
          echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list

          sudo apt-get update -y
          sudo apt-get install -y nvhpc-${MAJOR_VERSION}-${MINOR_VERSION}

      - name: Configure AdaptiveCpp
        run: |
          export NV_HPC_SDK_ROOT=/opt/nvidia/hpc_sdk/Linux_x86_64/${{matrix.nvhpc}}
          export NV_HPC_CUDA_ROOT=${NV_HPC_SDK_ROOT}/cuda/${{matrix.cuda}}

          cmake \
            -S .. \
            -B build \
            -DNVCXX_COMPILER=${NV_HPC_SDK_ROOT}/compilers/bin/nvc++ \
            -DWITH_CUDA_BACKEND=ON \
            -DACPP_COMPILER_FEATURE_PROFILE=none \
            -DCMAKE_INSTALL_PREFIX=`pwd`/install \
            -DCUDA_TOOLKIT_ROOT_DIR=${NV_HPC_CUDA_ROOT}

      - name: Build AdaptiveCpp
        run: cmake --build build

      - name: Install AdaptiveCpp
        run: cmake --install build

      - name: Build tests
        run: |
          cmake \
            -S ${GITHUB_WORKSPACE}/tests
            -B ${GITHUB_WORKSPACE}/build/tests-nvcxx
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-DHIPSYCL_NO_FIBERS" \
            -DACPP_TARGETS="cuda-nvcxx"
          cmake --build ${GITHUB_WORKSPACE}/build/tests-nvcxx
